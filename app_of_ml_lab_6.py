# -*- coding: utf-8 -*-
"""App. of ML Lab 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jXiKlUc7ZBlhs4NUL5-a1vE3zouHEuR9

### LAB - 6 Baysien Classifier
**Assuming a set of documents that need to be classified, use the naïve Bayesian Classifier model to perform this task. Built-in classes/API can be used to write the program. Calculate the accuracy, precision, and recall for your data set.**
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')

data=pd.read_csv('naivetext1.csv',names=['message','label'])
print('Total instances in the dataset:',data.shape[0])

data

data['labelnum']=data.label.map({'pos':1,'neg':0})
X=data.message
Y=data.label

X

Y

print('The message and its label of first 5 instances are listed below')
X5, Y5 = X[0:5], data.label[0:5]
for x, y in zip(X5,Y5):
  print(x,',',y)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X,Y)
print('\nDataset is split into Training and Testing samples')
print('Total training instances :', xtrain.shape[0])
print('Total testing instances :', xtest.shape[0])

from sklearn.feature_extraction.text import CountVectorizer
count_vect = CountVectorizer()
xtrain_dtm = count_vect.fit_transform(xtrain)
xtest_dtm = count_vect.transform(xtest)
print('Total features extracted using CountVectorizer:',xtrain_dtm.shape[1])

xtrain_dtm

print('Features for first 5 training instances are listed below')
df=pd.DataFrame(xtrain_dtm.toarray(),columns=count_vect.get_feature_names())
print(df[0:5])

from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB().fit(xtrain_dtm,ytrain)
predicted = clf.predict(xtest_dtm)

print('classification results of testing samples are given below')
for doc, p in zip(xtest, predicted):
    pred = 'pos' if p==1 else 'neg'
    print('%s -> %s ' % (doc, pred))

from sklearn.metrics import accuracy_score,recall_score,precision_score,confusion_matrix
print('Accuracy metrics')
print('Accuracy of the classifer is',accuracy_score(ytest,predicted))
print('Recall:{0}\nPrecison:{1}'.format(recall_score(ytest,predicted, pos_label='positive',average='micro'),precision_score(ytest,predicted,pos_label='positive',average='micro')))
print('Confusion matrix')
print(confusion_matrix(ytest,predicted))